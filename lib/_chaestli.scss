@use 'sass:map';
@use './chaestli__helpers' as *;

/// Create a grid container defining the width of the main content and the edges
/// @param {Map} $definition - A single container structure definition
///
@mixin container($definition) {
    $definition: create-container-config($definition);

    // read config variables
    $container-size: map.get($definition, 'container-size');
    $display: map.get($definition, 'display');
    $grid-template-areas: map.get($definition, 'grid-template-areas');
    $edge: map.get($definition, 'edge');

    // prepare variables to render
    $has-container-size: type-of($container-size) == 'number';
    $content-width: if($has-container-size, $container-size - (2 * $edge), 100%);
    $border-width: if($has-container-size, 1fr, 0);

    // render css props
    display: $display;
    grid-template-areas: $grid-template-areas;
    grid-template-columns: $border-width $content-width $border-width;
    column-gap: $edge;
}

/// Define a grid structure
/// @param {Map} $definition - A single grid structure definition
///
@mixin grid($definition) {
    $definition: create-grid-config($definition);

    // read config variables
    $gutter: map.get($definition, 'gutter');
    $display: map.get($definition, 'display');
    $grid-area: map.get($definition, 'grid-area');
    $repeat-directive: map.get($definition, 'repeat-directive');
    $num-cols: map.get($definition, 'num-cols');

    // render css props
    display: $display;
    grid-area: $grid-area;
    grid-template-columns: repeat(#{$repeat-directive}, calc(#{100%} / #{$num-cols} - #{$gutter}));
    column-gap: $gutter;
}

/// Just an alias for grid-column
/// @param {list|number} $start - column start
/// @param {list|number} $end - column end
///
@mixin column($start, $end) {
    @if ($end) {
        grid-column: #{$start} / #{$end};
    } @else {
        grid-column: $start;
    }
}
