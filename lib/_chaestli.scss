@use 'sass:map';
@use './chaestli__helpers' as *;

/// Create a grid container defining the width of the main content and its edges
/// @param {Map} $definition - A single container structure definition
/// @example scss - Simple container: input
///  .grid {
///      .grid__container {
///          @include chaestli.container((edge: 16px, container-size: 800px));
///      }
///  }
///
/// @output
///  .grid .grid__container {
///      max-width: 800px;
///      margin-left: auto;
///      margin-left: auto;
///      padding-left: 16px;
///      margin-left: 16px;
///  }
///
@mixin container($definition: ()) {
    $definition: create-container-config($definition);

    // read config variables
    $container-size: map.get($definition, 'container-size');
    $edge: map.get($definition, 'edge');

    // prepare variables to render
    $has-container-size: type-of($container-size) == 'number';
    $content-width: if($has-container-size, $container-size, none);

    // render css props
    max-width: $content-width;
    margin: {
        left: auto;
        right: auto;
    };
    padding: {
        left: $edge;
        right: $edge;
    };
}

/// Define a grid structure
/// @param {Map} $definition - A single grid structure definition
///
/// @example scss - Simple 12 columns grid with rows and cols gutter: input
///  .grid {
///      .grid__row {
///          @include chaestli.grid((gutter: (16px, 24px), num-cols: 12));
///      }
///  }
///
/// @output
///  .grid .grid__row {
///      display: grid;
///      grid-template-columns: repeat(auto-fill, minmax(calc(100% / 12 - 16px), 1fr));
///      column-gap: 16px;
///      row-gap: 24px;
///  }
///
@mixin grid($definition: ()) {
    $definition: create-grid-config($definition);

    // read config variables
    $gutter: map.get($definition, 'gutter');
    $display: map.get($definition, 'display');
    $repeat-directive: map.get($definition, 'repeat-directive');
    $num-cols: map.get($definition, 'num-cols');

    // prepare variables to render
    $gaps: get-grid-gaps($gutter);
    $column-gap: map.get($gaps, 'column');
    $row-gap: map.get($gaps, 'row');
    $column-size: if($column-gap > 0, calc(100% / #{$num-cols} - #{$column-gap}), calc(100% / #{$num-cols}));

    // render css props
    display: $display;
    grid-template-columns: repeat(#{$repeat-directive}, minmax($column-size, 1fr));
    column-gap: $column-gap;
    row-gap: $row-gap;
}

/// Just an alias for grid-column
/// @param {list|number} $start - column start
/// @param {list|number} $end - column end
/// @example scss - Simple column 3 span over 12 columns: input
///  .grid {
///      .grid__three-col {
///          @include chaestli.column(3 span, 12 span);
///      }
///  }
///
/// @output
///  .grid .grid__three-col {
///      grid-column: 3 span / 12 span;
///  }
@mixin column($start, $end: null) {
    @if ($end) {
        grid-column: #{$start} / #{$end};
    } @else {
        grid-column: $start;
    }
}
