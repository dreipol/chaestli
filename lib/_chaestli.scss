@use './chaestli__helpers' as *;

/// Create a grid container defining the width of the main content and the edges
/// @param {Map} $definition - A single container structure definition
///
@mixin container($definition) {
    $definition: create-container-config($definition);

    // read config variables
    $container-size: map-get($definition, 'container-size');
    $display: map-get($definition, 'display');
    $grid-template-areas: map-get($definition, 'grid-template-areas');
    $edge: map-get($definition, 'edge') * 1px;

    // prepare variables to render
    $has-container-size: type-of($container-size) == 'number';
    $content-width: if($has-container-size, $container-size - (2 * $edge), auto);
    $border-width: if($has-container-size, 1fr, 0);

    // render css props
    display: $display;
    grid-template-areas: $grid-template-areas;
    grid-template-columns: $border-width $content-width $border-width;
    column-gap: $edge;
}

/// Define a grid structure
/// @param {Map} $definition - A single grid structure definition
///
@mixin grid($definition) {
    $definition: create-grid-config($definition);

    // read config variables
    $gutter: map-get($definition, 'gutter') * 1px;
    $repeat-directive: map-get($definition, 'repeat-directive');
    $num-cols: map-get($definition, 'num-cols');

    // render css props
    grid-template-columns: repeat(#{$repeat-directive}, minmax(calc(#{100% / $num-cols} - #{$gutter}), 1fr));
    column-gap: $gutter;
}

/// Alias for grid-column
/// @param {number|string} $ratio - any value compatible to the grid-column rule
///
@mixin column($ratio) {
    @if type-of($ratio) == string {
        grid-column: #{$ratio};
    } @else {
        grid-column: $ratio;
    }
}
